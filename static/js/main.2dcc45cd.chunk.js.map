{"version":3,"sources":["serviceWorker.js","components/Items.js","utilities.js","components/Main.js","components/Inventory.js","components/Admin.js","components/NotFound.js","components/CartObject.js","components/CartPage.js","index.js"],"names":["Boolean","window","location","hostname","match","Items","state","items","fetch","this","props","result","json","setState","fetchItems","react_default","a","createElement","Fragment","className","map","item","key","id","src","image","name","price","toLocaleString","style","currency","Component","Main","components_Items","data-url","Inventory","inventory","fetchInventory","inventoryItem","type","value","Admin","components_Inventory","NotFound","CartObject","CartPage","render","react_router_dom","to","components_CartObject","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ICoBSC,6MAjCZC,MAAQ,CACHC,MAAO,gNAIcC,MAAMC,KAAKC,MAAM,2BAAhCC,kBACcA,EAAOC,cAArBL,SACNE,KAAKI,SAAS,CAAEN,wJAIhBE,KAAKK,8CAIT,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACZV,KAAKH,MAAMC,MAAMa,IAAI,SAAAC,GAAI,OACxBN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAAKE,GAAIJ,UAAU,SAC3BJ,EAAAC,EAAAC,cAAA,OAAKO,IAAKH,EAAKI,QACfV,EAAAC,EAAAC,cAAA,SAAII,EAAKK,MACTX,EAAAC,EAAAC,cAAA,UAAgBI,EAAKM,MC3BjB,KAAKC,eAAe,QAAS,CAC3CC,MAAO,WACPC,SAAU,sBDAIC,aEcLC,mLATX,OACIjB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAACgB,EAAD,CAAOC,WAPH,gCAEGH,aCiCJI,6MAjCX7B,MAAQ,CACJ8B,UAAW,oNAIU5B,MAAMC,KAAKC,MAAM,2BAAhCC,kBACkBA,EAAOC,cAAzBwB,SACN3B,KAAKI,SAAS,CAAEuB,4JAIhB3B,KAAK4B,kDAIT,OACAtB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACVV,KAAKH,MAAM8B,UAAUhB,IAAI,SAAAkB,GAAa,OACvCvB,EAAAC,EAAAC,cAAA,QAAMK,IAAKgB,EAAcf,GAAIJ,UAAU,wBACnCJ,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOb,KAAK,kBAAkBc,MAAOF,EAAcf,KAC/DR,EAAAC,EAAAC,cAAA,OAAKO,IAAKc,EAAcb,QACxBV,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOb,KAAK,qBAAqBc,MAAOF,EAAcb,QAClEV,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOb,KAAK,oBAAoBc,MAAOF,EAAcZ,OACjEX,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOb,KAAK,qBAAqBc,MAAOF,EAAcX,oBA1B1DI,aCaTU,mLARX,OACE1B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACfJ,EAAAC,EAAAC,cAACyB,EAAD,CAAWR,WAPD,gCAEIH,aCGLY,EANE,kBACf5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBCSW2B,mLARX,OACE7B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAAA,OAAKO,IAAI,4BALQO,aCWVc,mLARX,OACE9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,eAJiBY,aCYrBe,iBACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACAhC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACPJ,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,GAAG,KAAIjC,EAAAC,EAAAC,cAAA,yBACbF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,GAAG,UAASjC,EAAAC,EAAAC,cAAA,oBAClBF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,GAAG,SAAQjC,EAAAC,EAAAC,cAACgC,EAAD,SAG3BlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACInC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjCjB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWZ,IAChC1B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWR,IAC/B9B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOG,UAAWV,MAGpBW,SAASC,eAAe,QTmGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2dcc45cd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { formatPrice } from '../utilities';\n\nclass Items extends Component {\n\n   state = {\n        items: []\n       }\n\n       async fetchItems() {\n        const result = await fetch(this.props['data-url']);\n        const items = await result.json();\n        this.setState({ items });\n      }\n\n     componentDidMount() {\n        this.fetchItems();\n    }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"items-container\">\n            {this.state.items.map(item => (\n              <div key={item.id} className=\"items\">\n                <img src={item.image}></img>\n                <p>{item.name}</p>\n                <p>{formatPrice(item.price)}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Items;","export function formatPrice(cents) {\n    return (cents / 100).toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    });\n  }","import React, { Component } from 'react';\nimport Items from './Items';\n\nconst dataUrl = '../store-items.json';\n\nclass Main extends Component {\n\n  render() {\n    return (\n        <React.Fragment>\n            <Items data-url={dataUrl} />\n        </React.Fragment>\n      \n    );\n  }\n}\n\nexport default Main;","\nimport React, { Component } from 'react';\n\nclass Inventory extends Component {\n\n    state = {\n        inventory: []\n       }\n\n       async fetchInventory() {\n        const result = await fetch(this.props['data-url']);\n        const inventory = await result.json();\n        this.setState({ inventory });\n      }\n\n     componentDidMount() {\n        this.fetchInventory();\n    }\n    \n  render() {\n    return (\n    <React.Fragment>\n        <div className=\"inventory-container\">\n            {this.state.inventory.map(inventoryItem => (\n            <form key={inventoryItem.id} className=\"indiv-inventory-form\">\n                <input type=\"text\" name=\"inventoryItemID\" value={inventoryItem.id}></input>\n                <img src={inventoryItem.image}></img>\n                <input type=\"text\" name=\"inventoryItemImage\" value={inventoryItem.image}></input>\n                <input type=\"text\" name=\"inventoryItemName\" value={inventoryItem.name}></input>\n                <input type=\"text\" name=\"inventoryItemPrice\" value={inventoryItem.price}></input>\n            </form>\n            ))}\n        </div>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default Inventory;","import React, { Component } from 'react';\nimport Inventory from './Inventory';\n\nconst dataUrl = '../store-items.json';\n\nclass Admin extends Component {\n\n  render() {\n    return (\n      <div className=\"admin-container\">\n      <Inventory data-url={dataUrl} />\n    </div>\n    );\n  }\n}\n\nexport default Admin;","import React from 'react';\n\nconst NotFound = () => (\n  <div>\n    <h2>Not Found</h2>\n  </div>\n);\n\nexport default NotFound;","import React, { Component } from 'react';\n\nclass CartObject extends Component {\n\n  render() {\n    return (\n      <div className=\"cartObject-container\">\n        <img src=\"../img/cart.png\"></img>\n    </div>\n    );\n  }\n}\n\nexport default CartObject;","import React, { Component } from 'react';\n\nclass CartPage extends Component {\n\n  render() {\n    return (\n      <div className=\"cartPage-container\">\n        cart\n    </div>\n    );\n  }\n}\n\nexport default CartPage;","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Main from './components/Main';\nimport Admin from './components/Admin';\nimport NotFound from './components/NotFound';\nimport CartObject from './components/CartObject';\nimport CartPage from './components/CartPage';\n\n\n// const dataUrl = './store-items.json';\n\n  render(\n    <Router>\n    <React.Fragment>\n    <div className=\"menu-container\">\n            <Link to=\"/\"><h1>THE CLOSET</h1></Link>\n            <Link to=\"/admin\"><h3>ADMIN</h3></Link>\n            <Link to=\"/cart\"><CartObject /></Link>\n    </div>\n  </React.Fragment>\n  <Switch>\n      <Route exact path=\"/\" component={Main} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/cart\" component={CartPage} />\n      <Route component={NotFound} />\n    </Switch>\n</Router>,\n    document.getElementById('app')\n  );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}